[tool.poetry]
name = "metasploit-mcp"
version = "1.6.0"
description = "Metasploit MCP Server - Provides core Metasploit functionality via the Model Context Protocol"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "MetasploitMCP.py"}]

[tool.poetry.dependencies]
python = "^3.8"
fastapi = ">=0.95.0"
uvicorn = {extras = ["standard"], version = ">=0.22.0"}
pymetasploit3 = ">=1.0.6"
mcp = ">=1.6.0"
fastmcp = ">=2.10.3"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.0.0"
pytest-asyncio = ">=0.21.0"
pytest-mock = ">=3.10.0"
pytest-cov = ">=4.0.0"
mock = ">=4.0.3"

[tool.poetry.scripts]
metasploit-mcp = "MetasploitMCP:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests", 
    "slow: marks tests as slow running"
]

[tool.coverage.run]
source = ["."]
omit = ["tests/*", "venv/*", ".venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
